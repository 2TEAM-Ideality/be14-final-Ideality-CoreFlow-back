<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ideality.coreflow.user.query.mapper.UserMapper">

    <resultMap id="userPreview" type="com.ideality.coreflow.user.query.dto.ResponseUser">
        <id property="id" column="ID" />
        <result property="name" column="NAME" />
        <result property="deptName" column="DEPT_NAME" />
        <result property="jobRankName" column="JOB_RANK_NAME" />
        <result property="jobRoleName" column="JOB_ROLE_NAME" />
        <result property="isCreation" column="IS_CREATION" />
        <result property="isResign" column="IS_RESIGN"/>
        <result property="isInner" column="IS_INNER"/>
    </resultMap>

    <!-- 유저별 역할 -->
    <resultMap id="userOfRoleResultMap" type="com.ideality.coreflow.user.query.dto.UserOfRoleDTO">
        <id property="id" column="ID"/>
        <result property="roleId" column="ROLE_ID"/>
        <result property="userId" column="USER_ID"/>
        <result property="roleName" column="ROLE_NAME"/>
        <result property="roleType" column="TYPE"/>
    </resultMap>

    <select id="selectAllUserPreView" resultMap="userPreview">
        SELECT
               u.id AS ID
             , u.name AS NAME
             , u.dept_name AS DEPT_NAME
             , u.job_rank_name AS JOB_RANK_NAME
             , u.job_role_name AS JOB_ROLE_NAME
             , MAX(CASE WHEN r.name = 'CREATOR' THEN TRUE ELSE FALSE END) AS IS_CREATION
             , u.is_resign AS IS_RESIGN
             , MAX(CASE WHEN r.name = 'PARTNER' THEN FALSE ELSE TRUE END) AS IS_INNER
          FROM user u
          LEFT JOIN user_of_role ur ON ur.user_id = u.id
          LEFT JOIN role r ON ur.role_id = r.id
         WHERE u.job_role_name != 'ADMIN'
         GROUP BY
               u.id
             , u.name
             , u.dept_name
             , u.job_rank_name
             , u.job_role_name
             , u.is_resign
         ORDER BY
               u.is_resign
             , u.id DESC
    </select>

    <resultMap id="AllUserMap" type="com.ideality.coreflow.user.query.dto.AllUserDTO">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="deptName" column="dept_name"/>
        <result property="profileImage" column="profile_image"/>
        <result property="jobRank" column="job_rank_name"/>
    </resultMap>

    <select id="selectUserOfGeneralRole" parameterType="_long" resultMap="userOfRoleResultMap">
        SELECT
               ur.role_id AS ROLE_ID,
               ur.user_id AS USER_ID,
               r.name AS ROLE_NAME,
               r.type AS TYPE
          FROM user u
          LEFT JOIN user_of_role ur ON u.id = ur.user_id
          LEFT JOIN role r ON ur.role_id = r.id
         WHERE u.id = #{userId}
           AND r.type = 'GENERAL'
    </select>

    <select id="countByHireMonthAndDeptName" resultType="long">
        SELECT COUNT(*)
          FROM user
         WHERE DATE_FORMAT(HIRE_DATE, '%y') = #{year}
           AND DEPT_NAME = #{deptName}
    </select>

    <select id="countByJobRoleName" resultType="long">
        SELECT COUNT(*)
          FROM user
         WHERE JOB_ROLE_NAME = #{roleName}
    </select>

    <resultMap id="userMentionMap" type="com.ideality.coreflow.user.query.dto.UserMentionDTO">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="deptName" column="dept_name"/>
    </resultMap>

    <select id="selectAllUserByDeptName" resultType="_long">
        SELECT
               id
          FROM user
         WHERE dept_name = #{deptName}
    </select>

    <select id="selectLeadersByDeptName" resultType="_long">
        SELECT
               a.id
          FROM user a
          JOIN participant b ON a.id = b.user_id
         WHERE a.dept_name = #{deptName}
           AND b.role_id = 2
           AND b.target_type = 'PROJECT'
           AND b.target_id = #{projectId}
         GROUP BY a.id
    </select>
    <select id="selectDeptNameByUserId" resultType="string" parameterType="_long">
        SELECT
            u.dept_name
        FROM user u
            WHERE #{userId} = u.id
    </select>
    <select id="searchUsersByName" resultType="com.ideality.coreflow.user.query.dto.UserNameIdDto">
        SELECT name, id
        FROM user
        WHERE name LIKE CONCAT('%', #{name}, '%')
        LIMIT 10;
    </select>

    <select id="selectUserById" resultType="java.lang.Boolean" parameterType="long">
        SELECT EXISTS (
            SELECT 1
            FROM user
            WHERE id = #{userId}
        ) AS is_exist;
    </select>

    <select id="selectAllUserByProjectId" resultType="java.lang.Boolean" parameterType="long">
        SELECT
               name
             ,
          FROM user a
          JOIN participant b ON a.id = b.user_id
    </select>

    <select id="selectMentionUserByKeyword"
            parameterType="com.ideality.coreflow.user.query.dto.MentionSearchParamDTO"
            resultMap="userMentionMap">
        SELECT
        a.id,
        a.name,
        a.dept_name
        FROM user a
        JOIN participant b ON a.id = b.user_id
        WHERE b.target_id = #{projectId}
        AND b.target_type = 'PROJECT'

        <!-- 정확 매칭 우선 -->
        <if test="deptName != null and deptName != '' and name != null and name != ''">
            AND a.dept_name = #{deptName}
            AND a.name LIKE CONCAT('%', #{name}, '%')
        </if>

        <!-- keyword fallback -->
        <if test="(deptName == null or deptName == '')
              and (name == null or name == '')
              and keyword != null and keyword != ''">
            AND (
            a.name LIKE CONCAT('%', #{keyword}, '%')
            OR a.dept_name LIKE CONCAT('%', #{keyword}, '%')
            OR CONCAT(a.dept_name, '_', a.name) LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
    </select>

    <select id="selectUserListByMention" parameterType="list" resultType="long">
        SELECT a.id
        FROM user a
        JOIN participant b ON a.id = b.user_id
        WHERE b.target_type = 'PROJECT'
        AND (
        <foreach collection="list" item="cond" separator="OR">
            (
            b.target_id = #{cond.projectId}
            AND a.dept_name = #{cond.deptName}
            <if test="cond.name != null and cond.name != ''">
                AND a.name = #{cond.name}
            </if>
            )
        </foreach>
        )
    </select>

    <select id="selectUserNameById" resultType="string">
        SELECT
               name
          FROM user
         WHERE id = #{userId}
    </select>

    <select id="selectAllUser" resultType="map" resultMap="AllUserMap">
        SELECT
               id
             , name
             , dept_name
             , job_rank_name
             , profile_image
          FROM user
    </select>

    <!-- 팀 또한 검색어 없어도 모든 팀 조회되게 하기 -->
    <select id="selectDeptNameByMentionInfo" parameterType="map" resultType="string">
        SELECT DISTINCT a.dept_name
        FROM user a
        JOIN participant b ON a.id = b.user_id
        WHERE b.target_type = 'PROJECT'
        AND b.target_id = #{projectId}
        <if test="mentionTarget != null and mentionTarget != ''">
            AND a.dept_name LIKE CONCAT('%', #{mentionTarget}, '%')
        </if>
    </select>

    <select id="selectDeptNamesByProjectId" parameterType="map" resultType="string">
        SELECT DISTINCT a.dept_name
        FROM user a
        JOIN participant b ON a.id = b.user_id
        WHERE b.target_type = 'PROJECT'
        AND b.target_id = #{projectId}
    </select>

    <!-- dept_name으로 사용자 id와 name을 가져오는 SQL 쿼리 -->
    <select id="getUsersByDept" resultType="com.ideality.coreflow.user.query.dto.UserNameIdDto">
        SELECT id, name
        FROM user
        WHERE dept_name = #{deptName}
    </select>
</mapper>